;;;cond
(load "basic-exp.scm")

(define (install-cond)
  (define keyword 'cond)
  (define make-if (get 'make-if 'if))
  (define sequence->exp (get 'sequence->exp 'begin))
  (define (cond-clauses exp) (cdr exp))
  (define (cond-else-clause? clause)
    (eq? (cond-predicate clause) 'else))
  (define (cond-predicate clause) 
    (car clause))
  (define (cond-actions clause) 
    (cdr clause))
  (define (cond->if exp)
    (expand-clauses (cond-clauses exp)))
  (define (expand-clauses clauses)
    (if (null? clauses)
        'false     ; no else clause
        (let ((first (car clauses))
              (rest (cdr clauses)))
          (if (cond-else-clause? first)
              (if (null? rest)
                  (sequence->exp
                   (cond-actions first))
                  (error "ELSE clause isn't 
                         last: COND->IF"
                         clauses))
              (make-if
               (cond-predicate first)
               (sequence->exp
                (cond-actions first))
                       (expand-clauses 
                        rest))))))
  (define (eval-cond exp env)
    ((get 'eval-dispatch 'if)
     (cond->if exp)
     env))
  (put 'eval-dispatch 'cond eval-cond)
  "installed cond")
(install-cond)

;;;and
(define (install-and)
  (define keyword 'and)
  (define make-if (get 'make-if 'if))
  (define eval-if (get 'eval-dispatch 'if))
  (define (last-seq? seq) (null? (cdr seq)))
  (define (and-seq exp) (cdr exp))
  (define (first-seq seq) (car seq))
  (define (rest-seq seq) (cdr seq))
  (define (and->if exp)
    (expand-seq (and-seq exp)))
  (define (expand-seq seq)
    (cond ((null? seq)
           (make-if true true false))
          ((last-seq? seq)
           (make-if (first-seq seq) (first-seq seq) false))
          (else (make-if
                  (first-seq seq)
                  (expand-seq (rest-seq seq))
                  false))))
  (define (eval-and exp env)
    (eval-if
     (and->if exp)
     env))
  (put 'eval-dispatch keyword eval-and)
  "installed and")
(install-and)
        
;;;or
(define (install-or)
  (define keyword 'or)
  (define make-if (get 'make-if 'if))
  (define eval-if (get 'eval-dispatch 'if))
  (define (no-seq? seq) (null? seq))
  (define (or-seq exp) (cdr exp))
  (define (first-seq seq) (car seq))
  (define (rest-seq seq) (cdr seq))
  (define (expand-seq seq)
    (if (no-seq? seq)
        (make-if false false false)
        (make-if (first-seq seq)
                 true
                 (expand-seq (rest-seq seq)))))
  (define (or->if exp)
    (expand-seq (or-seq exp)))
  (define (eval-or exp env)
    (eval-if (or->if exp) env))
  (put 'eval-dispatch keyword eval-or)
  "installed or")
(install-or)