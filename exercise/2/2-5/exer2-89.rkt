#lang sicp

(#%require "type.rkt")
(#%require "table.rkt")
(#%require "generic.rkt")

(#%require "install-polynomial-package.rkt")

(define (install-dense-package)
  (define (adjoin-term term term-list)
    (define (term->dense-termlist term)
      (let ((ord (order term))
            (coe (coeff term)))
        (if (= ord 0)
            (list coe)
            (cons coe
                  (term->dense-termlist
                   (make-term (- ord 1)
                              0))))))
    (let ((ord (order term))
          (coe (coeff term))
          (len (length term-list)))
      (cond ((empty-termlist? term-list)
             (term->dense-termlist term))
            ((> ord (- len 1))
             (cons coe
                   (adjoin-term
                    (make-term (- ord 1) 0)
                    term-list)))
            ((= ord (- len 1))
             (cons (add (car term-list)
                        coe)
                   (cdr term-list)))
            (else (cons (car term-list)
                        (adjoin-term term (cdr term-list)))))))
  (define (the-empty-termlist) '())
  (define (first-term term-list)
    (cond ((empty-termlist? term-list)
           '())
          ((=zero? (car term-list))
           (first-term (cdr term-list)))
          (else
           (make-term (- (length term-list) 1)
                   (car term-list)))))
  (define (rest-terms term-list)
    (cond ((empty-termlist? term-list) '())
          ((= 1 (length term-list)) (cdr term-list))
          ((=zero? (car term-list))
           (rest-terms (cdr term-list)))
          (else (cdr term-list))))
  (define (empty-termlist? term-list)
    (or (null? term-list)
        (= 0 (apply + (map abs term-list)))))
  (define (negative-termlist L)
    (if (= (length L) 0)
        (the-empty-termlist)
        (cons (negative (car L))
              (negative-termlist (cdr L)))))
  (define (make-termlist coeffs)
    coeffs)
  
  (define (tag p) (attach-tag 'dense p))
  (put 'adjoin-term 'dense
       (lambda (term termlist) (tag (adjoin-term term termlist))))
  (put 'negative-termlist '(dense)
       (lambda (termlist)
         (tag (negative-termlist termlist))))
  (put 'the-empty-termlist '(dense) (tag (the-empty-termlist)))
  (put 'first-term '(dense) first-term)
  (put 'rest-terms '(dense)
       (lambda (term-list)
         (tag (rest-terms term-list))))
  (put 'empty-termlist? '(dense) empty-termlist?)
  (put 'make-termlist 'dense
       (lambda (coeffs)
         (tag (make-termlist coeffs))))
  'done)


  ; (define (negative-termlist L)
  ;   (if (empty-termlist? L)
  ;       (the-empty-termlist)
  ;       (adjoin-term
  ;        (make-term (order (first-term L))
  ;                   (negative (coeff (first-term L))))
  ;        (negative-termlist (rest-terms L)))))