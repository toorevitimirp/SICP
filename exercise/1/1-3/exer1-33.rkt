#lang sicp

(define (filtered-accumulate-rec combiner null-value filter term a next b)
  (cond ((> a b) null-value)
        ((not (filter a))
         (filtered-accumulate-rec combiner null-value filter term (next a) next b))
        (else (combiner (term a)
                        (filtered-accumulate-rec combiner null-value filter term (next a) next b)))))

(define (filtered-accumulate-iter  combiner null-value filter term a next b)
  (define (iter a res)
    (cond ((> a b) res)
          ((filter a)
           (iter (next a) (combiner (term a) res)))
          (else (iter (next a) res))))
  (iter a null-value))
  
(define (filtered-accumulate  combiner null-value filter term a next b)
  ;;; (filtered-accumulate-rec  combiner null-value filter term a next b))
  (filtered-accumulate-iter  combiner null-value filter term a next b))

(define (prime? n)
  (define (square n) (* n n))
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (smallest-divisor n)
    (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n)
           n)
          ((divides? test-divisor n)
           test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (= n (smallest-divisor n)))

(define (assignment-a a b)
  (define (square x)
    (* x x))
  (define (inc x)
    (+ x 1))
  (filtered-accumulate + 0 prime? square a inc b))

(define (assignment-a-correct a b)
  (define (square x)
    (* x x))
  (cond ((> a b) 0)
        ((prime? a)
         (+ (square a)
            (assignment-a-correct (+ a 1) b)))
        (else (assignment-a-correct (+ a 1) b))))

(assignment-a 2 50)
(assignment-a-correct 2 50)
(assignment-a 10 120)
(assignment-a-correct 10 120)

(define (assignment-b n)
  (define (relatively-prime? i)
    (define (gcd a b)
      (if (= b 0)
        a
        (gcd b (remainder a b))))
    (= (gcd i n) 1))
  (define (identity x)
    x)
  (define (inc x)
    (+ x 1))
  (filtered-accumulate * 1 relatively-prime? identity 1 inc n))

(define (assignment-b-correct n)
  (define (gcd a b)
    (if (= b 0)
      a
      (gcd b (remainder a b))))
  (define (iter i res)
    (cond ((= i 1) res)
          ((= (gcd i n) 1)
           (iter (- i 1) (* res i)))
          (else (iter (- i 1) res))))
  (iter n 1))

(assignment-b 100)
(assignment-b-correct 100)
(assignment-b 69)
(assignment-b-correct 69)