#lang sicp
(define (make-interval a b) (cons a b))

(define (upper-bound interval)
  (max (car interval) (cdr interval)))

(define (lower-bound interval)
  (min (car interval) (cdr interval)))

(define (print-interval interval)
  (display "[")
  (display (lower-bound interval))
  (display ",")
  (display (upper-bound interval))
  (display "]")
  (newline))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) 
               (lower-bound y)))
        (p2 (* (lower-bound x) 
               (upper-bound y)))
        (p3 (* (upper-bound x) 
               (lower-bound y)))
        (p4 (* (upper-bound x) 
               (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (new-mul-interval x y)
  (let ((a1 (lower-bound x))
        (b1 (upper-bound x))
        (a2 (lower-bound y))
        (b2 (upper-bound y)))
    (cond ((>= a1 0)
           (cond ((>= a2 0)
                  (make-interval (* a1 a2)
                                 (* b1 b2)))
                 ((and (< a2 0) (>= b2 0))
                  (make-interval (* b1 a2)
                                 (* b1 b2)))
                 ((<= b2 0)
                  (make-interval (* b1 a2)
                                 (* a1 b2)))))
          ((and (< a1 0) (>= b1 0))
           (cond ((>= a2 0)
                  (make-interval (* a1 b2)
                                 (* b1 b2)))
                 ((and (< a2 0) (>= b2 0))
                  (make-interval (min (* a1 b2)
                                      (* b1 a2))
                                 (max (* a1 a2)
                                      (* b1 b2))))
                 ((<= b2 0)
                  (make-interval (* b1 a2)
                                 (* a1 a2)))))
          ((<= b1 0)
           (cond ((>= a2 0)
                  (make-interval (* a1 b2)
                                 (* b1 a2)))
                 ((and (< a2 0) (>= b2 0))
                  (make-interval (* a1 b2)
                                 (* a1 a2)))
                 ((<= b2 0)
                  (make-interval (* b1 b2)
                                 (* a1 a2))))))))

;;; (define x (make-interval 1 2))
;;; (define y (make-interval 3 4))
;;; (define x (make-interval 0 2))
;;; (define y (make-interval 0 4))
;;; (define x (make-interval 1 2))
;;; (define y (make-interval -1 4))
;;; (define x (make-interval 0 2))
;;; (define y (make-interval -1 4))
;;; (define x (make-interval 1 2))
;;; (define y (make-interval -3 0))
;;; (define x (make-interval 0 2))
;;; (define y (make-interval -3 0))
;;; (define x (make-interval 0 2))
;;; (define y (make-interval -3 -2))
;;; (define x (make-interval 1 2))
;;; (define y (make-interval -3 -2))
;;; (define x (make-interval -5 2))
;;; (define y (make-interval -3 3))
;;; (define x (make-interval 0 6))
;;; (define y (make-interval -3 2))
;;; (define x (make-interval 0 6))
;;; (define y (make-interval -3 0))
(define x (make-interval 2 6))
(define y (make-interval -3 0))
(print-interval (new-mul-interval x y))
(print-interval (mul-interval x y))
                  