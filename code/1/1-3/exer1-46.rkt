#lang sicp
;;; (define (fixed-point f first-guess)
;;;   (define tolerance 0.00001)
;;;   (define (close-enough? v1 v2)
;;;     (< (abs (- v1 v2)) 
;;;        tolerance))
;;;   (define (try guess)
;;;     (let ((next (f guess)))
;;;       (if (close-enough? guess next)
;;;           next
;;;           (try next))))
;;;   (try first-guess))

;;; (define (sqrt x)
;;;   (define (average x y) (/ (+ x y) 2))
;;;   (define (square x) (* x x))
;;;   (define (improve guess)
;;;     (average guess (/ x guess)))
;;;   (define (good-enough? old-guess new-guess)
;;;     (> 0.00001 (/ (abs (- new-guess old-guess))
;;;                old-guess)))
;;;   (define (try guess)
;;;     (if (good-enough? guess (improve guess))
;;;          guess
;;;          (try (improve guess))))
;;;   (try 1))

(define (iterative-imporve good-enough? improve)
  (lambda (first-guess)
    (define (try guess)
       (let ((next (improve guess)))
         (if (good-enough? guess next)
             next
             (try next))))
    (try first-guess)))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
     (define tolerance 0.00001)
     (< (abs (- v1 v2)) 
        tolerance))
  ((iterative-imporve close-enough? f) first-guess))

(define (sqrt x)
  (define (improve guess)
    (/ (+ guess(/ x guess))2))
  (define (good-enough? old-guess new-guess)
    (> 0.00001 (/ (abs (- new-guess old-guess))
               old-guess)))
  ((iterative-imporve good-enough? improve) 1))

(fixed-point cos 1.0)
(sqrt 2.0)
